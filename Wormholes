https://www.hackerrank.com/contests/target-samsung-13-nov19/challenges/warmholes

Input:
1
3
0 0 100 100
1 2 120 120 16
2 5 120 100 21
6 8 150 180 16

Output:
48

Code:

#include <bits/stdc++.h>
using namespace std;

int dist(int x1, int y1, int x2, int y2)
{
    return abs(x1 - x2) + abs(y1 - y2);
}

void solve()
{
    int n;
    cin >> n;

    pair<int, int> st, en;
    cin >> st.first >> st.second >> en.first >> en.second;

    set<pair<int, int>> a;

    a.insert(st);
    a.insert(en);

    vector<vector<int>> hole;

    for (int i = 0; i < n; i++)
    {
        int x1, y1, x2, y2, wt;
        cin >> x1 >> y1 >> x2 >> y2 >> wt;
        vector<int> t = {x1, y1, x2, y2, wt};
        hole.push_back(t);
        a.insert({x1, y1});
        a.insert({x2, y2});
    }

    vector<pair<int, int>> points(a.begin(), a.end());
    int N = points.size();
    int arr[N][N];
    int dp[N][N];
    int inf = 1e8;

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            arr[i][j] = inf;
            dp[i][j] = inf;
        }
    }

    for (auto &t : hole)
    {
        int i = lower_bound(points.begin(), points.end(), make_pair(t[0], t[1])) - points.begin();
        int j = lower_bound(points.begin(), points.end(), make_pair(t[2], t[3])) - points.begin();

        arr[i][j] = min(arr[i][j], t[4]);
        arr[j][i] = arr[i][j];
    }

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            arr[i][j] = min(dist(points[i].first, points[i].second, points[j].first, points[j].second), arr[i][j]);
            arr[j][i] = arr[i][j];
        }
    }

    for (int i = 0; i < N; i++)
    {
        for (int j = 0; j < N; j++)
        {
            dp[i][j] = arr[i][j];
        }
    }

    for (int k = 0; k < N; k++)
    
        for (int i = 0; i < N; i++)
        {
            for (int j = 0; j < N; j++)
            {
                {

                    if (dp[i][k] == inf || dp[k][j] == inf)
                        continue;

                    if (dp[i][k] + dp[k][j] < dp[i][j])
                    {
                        dp[i][j] = dp[i][k] + dp[k][j];
                    }
                }
            }
        }

    int p1, p2;

    for (int i = 0; i < N; i++)
    {
        if (points[i] == st)
        {
            p1 = i;
        }

        if (points[i] == en)
        {
            p2 = i;
        }
    }

    cout << dp[p1][p2] << "\n";
}

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        solve();
    }

    return 0;
}
