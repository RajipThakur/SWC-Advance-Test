Input:
10
5
0 0 100 100 70 40 30 10 10 5 90 70 50 20
6
88 81 85 80 19 22 31 15 27 29 30 10 20 26 5 14
5
0 0 100 100 70 40 30 10 10 5 90 70 50 20
6
88 81 85 80 19 22 31 15 27 29 30 10 20 26 5 14
5
0 0 100 100 70 40 30 10 10 5 90 70 50 20
6
88 81 85 80 19 22 31 15 27 29 30 10 20 26 5 14
5
0 0 100 100 70 40 30 10 10 5 90 70 50 20
6
88 81 85 80 19 22 31 15 27 29 30 10 20 26 5 14
5
0 0 100 100 70 40 30 10 10 5 90 70 50 20
6
88 81 85 80 19 22 31 15 27 29 30 10 20 26 5 14

Output:
200
304
200
304
200
304
200
304
200
304

Code:
#include <bits/stdc++.h>
using namespace std;

vector<pair<int, int>> a;

int dp[5005][20];

int dist(int i, int j)
{
   return abs(a[i].first - a[j].first) + abs(a[i].second - a[j].second);
}

int fun(int mask, int last)
{
   int n = a.size() - 1;
   int reqMask = (1 << n) - 1;

   if (mask == reqMask)
   {
      return dist(last, n);
   }

   if (dp[mask][last] != -1)
      return dp[mask][last];

   int ans = 1e9;
   for (int j = 1; j < n; j++)
   {

      if (mask & (1 << j))
      {
         continue;
      }

      ans = min(ans, dist(last, j) + fun(mask | (1 << j), j));
   }

   return dp[mask][last] = ans;
}

void solve()
{
   int n;
   cin >> n;
   a.clear();
   a.resize(n + 2);

   for (int i = 0; i < n + 2; i++)
   {
      cin >> a[i].first >> a[i].second;
   }

   for (int i = 0; i <= (1 << (n + 2)); i++)
   {
      for (int j = 0; j <= n + 2; j++)
      {
         dp[i][j] = -1;
      }
   }

   swap(a[1], a.back());
   int ans = fun(1, 0);

   cout << ans << "\n";
}

int main()
{
   int t;
   cin >> t;
   while (t--)
   {
      solve();
   }
   return 0;
}
