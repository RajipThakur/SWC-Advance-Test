12 April ADV test
Punching card

Input:
5
4 10 9
0 5
1 1
1 2
1 3
10 8 1 5

5 11 10
1 4
0 5
0 2
1 3
1 1
9 9 4 1

6 12 14
0 3
1 7
1 2
1 2
0 3
1 1
7 13 7 7

7 15 15
1 3
1 6
0 4
0 5
0 3
1 2
1 2
14 14 8 10

10 20 20
1 6
1 6
0 6
1 4
1 2
0 3
1 1 
0 1
0 1
0 2
15 20 8 7

Output:
5
0
18
34
86

Code:
#include <bits/stdc++.h>
using namespace std;

struct DSU
{
   vector<int> parent, size;
   DSU(int N)
   { // make_set initially
      parent = vector<int>(N + 1);
      for (int i = 0; i <= N; i++)
         parent[i] = i;
      size = vector<int>(N + 1, 1);
   }

   int find_set(int v)
   {
      if (v == parent[v])
         return v;
      return parent[v] = find_set(parent[v]); // path compression
   }

   void union_sets(int a, int b)
   {
      a = find_set(a);
      b = find_set(b);
      if (a != b)
      {
         if (size[a] < size[b]) // using by size
            swap(a, b);
         parent[b] = a;
         // write merge function here
         // merge(a,b);
         size[a] += size[b];
      }
   }
};

void solve()
{
   int n, h, w;
   cin >> n >> w >> h;

   int a[w + 1][h + 1];

   int cnt = 1;
   for (int i = 1; i <= w; i++)
   {
      for (int j = 1; j <= h; j++)
      {
         a[i][j] = cnt;
         cnt++;
      }
   }

   int N = h * w;
   DSU dsu(cnt + 1);

   int x1 = 1, y1 = 1;
   int x2 = w, y2 = h;

   for (int i = 1; i <= n; i++)
   {
      int t, pos;
      cin >> t >> pos;

      if (t == 0)
      {
         // left to right
         for (int x = x1, nx = x1 + pos * 2 - 1; x <= x1 + pos - 1; x++, nx--)
         {

            for (int y = y1; y <= y2; y++)
            {
               int ny = y;
               dsu.union_sets(a[x][y], a[nx][ny]);
            }
         }

         x1 = x1 + pos;
      }
      else
      {
         // top to bottom
         for (int x = x1; x <= x2; x++)
         {
            for (int y = y1, ny = y1 + 2 * pos - 1; y <= y1 + pos - 1; y++, ny--)
            {
               int nx = x;
               dsu.union_sets(a[x][y], a[nx][ny]);
            }
         }

         y1 = y1 + pos;
      }
   }

   int xh, yh, xc, yc;
   cin >> xh >> yh >> xc >> yc;

   int parh = dsu.find_set(a[xh][yh]);
   int par = dsu.find_set(a[xc][yc]);

   if (par != parh)
   {
      cout << 0;
      cout << "\n";
      return;
   }

   int ans = 0;
   int flag = 0;

   for (int i = 1; i <= h; i++)
   {
      for (int j = 1; j <= w; j++)
      {
         if (j == xc && i == yc)
         {
            ans++;
            flag = 1;
            break;
         }
         else
         {
            if (dsu.find_set(a[j][i]) == parh)
            {
               ans++;
            }
         }
      }
      if (flag)
         break;
   }

   cout << ans << "\n";
}

int main()
{
   int t;
   cin >> t;
   while (t--)
   {
      solve();
   }
   return 0;
}
