https://leetcode.com/problems/burst-balloons/

You are given n balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array nums. You are asked to burst all the balloons.
If you burst the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1] coins. If i - 1 or i + 1 goes out of bounds of the array, then treat it as if there is a balloon with a 1 painted on it.
Return the maximum coins you can collect by bursting the balloons wisely.

Code:
int dp[305][305];
class Solution
{
public:
   int fun(int l, int r, vector<int> &nums)
   {
      int n = nums.size();
      if (l > r)
         return 0;
      if (dp[l][r] != -1)
         return dp[l][r];
      int ans = 0;
      for (int k = l; k <= r; k++)
      {
         int left = 1, right = 1;
         if (l - 1 >= 0)
            left = nums[l - 1];
         if (r + 1 < n)
            right = nums[r + 1];

         ans = max(ans, left * right * nums[k] + fun(l, k - 1, nums) + fun(k + 1, r, nums));
      }

      return dp[l][r] = ans;
   }

   int maxCoins(vector<int> &nums)
   {
      int n = nums.size();
      for (int i = 0; i < n; i++)
      {
         for (int j = 0; j < n; j++)
         {
            dp[i][j] = -1;
         }
      }

      return fun(0, n - 1, nums);
   }
};
